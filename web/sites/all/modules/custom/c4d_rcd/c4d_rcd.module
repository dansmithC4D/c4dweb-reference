<?php

// Define constants for our custom entity type and bundles.
define('C4D_RCD_ENTITY_TYPE', 'result_chain_diagram');
define('C4D_RCD_BUNDLE_DIAGRAM', 'diagram');
define('C4D_RCD_BUNDLE_PRIORITY_AREA', 'priority_area');
define('C4D_RCD_BUNDLE_RESULT', 'result');
define('C4D_RCD_BUNDLE_IMPACT', 'impact');
define('C4D_RCD_BUNDLE_FLOAT', 'float');
define('C4D_RCD_BUNDLE_INDICATOR', 'indicator');

/**
 * Implementation of hook_menu().
 */
function c4d_rcd_menu() {
  $items = [];
  $items['admin/c4d'] = [
    'title' => 'Capacity4dev',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => ['manage diagrams'],
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => 100,
  ];
  $items['admin/c4d/sig'] = [
    'title' => 'Sector Indicator Guidance',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => ['manage diagrams'],
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];
  $items['admin/c4d/sig/diagram_editor'] = [
    'title' => 'Diagram editor',
    'access arguments' => ['manage diagrams'],
    'page callback' => 'c4d_rcd_svg_editor',
    'file' => 'c4d_rcd.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['admin/c4d/sig/diagrams'] = [
    'title' => 'Diagram management',
    'access arguments' => ['manage diagrams'],
    'page callback' => 'c4d_rcd_diagram_list',
    'file' => 'c4d_rcd.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['admin/c4d/sig/diagrams/%c4d_rcd_diagram'] = [
    'title' => 'Diagram management',
    'title callback' => 'c4d_rcd_diagram_management_title',
    'title arguments' => [4],
    'access arguments' => ['manage diagrams'],
    'page callback' => 'c4d_rcd_diagram_management',
    'page arguments' => [4],
    'file' => 'c4d_rcd.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['c4d_rcd/iframe/%'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_get_iframe_content',
    'page arguments' => [2],
    'access arguments' => ['access content'],
    'delivery callback' => 'c4d_rcd_ajax_bare_delivery_callback',
    'type' => MENU_CALLBACK,
    'file' => 'c4d_rcd.pages.inc',
  ];
  $items['c4d_rcd/get_iframe_code/%/%ctools_js'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_get_iframe_code',
    'page arguments' => [2, 3],
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'c4d_rcd.pages.inc',
  ];
  // AJAX callbacks.
  // This item should be publicly available for the iframe.
  $items['c4d_rcd/ajax/load_positions'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_load_positions',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax/elenco_progetti'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_elenco_progetti',
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  // This item should be publicly available for the iframe.
  $items['c4d_rcd/ajax/elenco_priority_area'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_elenco_priority_area',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax/update_element'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_update_element',
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax/update_element2'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_update_element2',
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax/save_position'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_save_position',
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax/save_positions'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_save_positions',
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax/dettaglio_elemento'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_dettaglio_elemento',
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax/elimina_ele'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_elimina_ele',
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax_forms/%'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_ajax_get_form',
    'page arguments' => [2],
    'delivery callback' => 'c4d_rcd_ajax_bare_delivery_callback',
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  ];
  $items['c4d_rcd/ajax_forms_2/%/%/%ctools_js'] = [
    'title' => 'Results Chain Diagram',
    'page callback' => 'c4d_rcd_diagram_get_form',
    'page arguments' => [2, 3, 4],
    'access arguments' => ['manage diagrams'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/diagram_management.inc',
  ];
  $items['results-indicators/export/%'] = [
    'title' => 'Results & Indicators',
    'page callback' => 'c4d_rcd_export_excel',
    'page arguments' => [2],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/excel.inc',
  ];
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function c4d_rcd_menu_alter(&$items) {
  if (module_exists('overlay')) {
    // Make sure all admin/c4d paths are not displayed in the overlay.
    foreach ($items as $key => $value) {
      if (strpos($key, 'admin/c4d') === 0) {
        $items[$key]['options']['attributes']['class'][] = 'overlay-exclude';
      }
    }
  }
}

/**
 * Custom delivery callback to return bare HTML.
 *
 * @param type $page_callback_result
 */
function c4d_rcd_ajax_bare_delivery_callback($page_callback_result) {
  print $page_callback_result;
  drupal_exit();
}

/**
 * Implements hook_permission().
 */
function c4d_rcd_permission() {
  return [
    'manage diagrams' => [
      'title' => t('Manage diagrams'),
      'description' => t('Gives access to the diagrams management pages.'),
    ],
  ];
}

/**
 * Implements hook_admin_paths().
 */
function c4d_rcd_admin_paths() {
  $paths = [
    'c4d_rcd/ajax_forms/*' => TRUE,
    'c4d_rcd/ajax_forms_2/*/*/*' => TRUE,
    'c4d_rcd/get_iframe_code/*/*' => TRUE,
  ];
  return $paths;
}

/**
 * Implements hook_libraries_info().
 */
function c4d_rcd_libraries_info() {
  // SVG.js library.
  $libraries['svgjs'] = [
    'name' => 'SVG.js',
    'vendor url' => 'http://svgjs.com/',
    'download url' => 'https://cdnjs.com/libraries/svg.js',
    'version callback' => '_c4d_rcd_check_library_version', // Version >= 2.3.6
    'files' => [
      'js' => ['svg.js'],
    ],
  ];
  // Vivus library.
  $libraries['vivus'] = [
    'name' => 'vivus',
    'vendor url' => 'https://github.com/maxwellito/vivus',
    'download url' => 'https://github.com/jillix/svg.pan-zoom.js/releases',
    'version callback' => '_c4d_rcd_check_library_version', // Version >= 0.4.0
    'files' => [
      'js' => ['src/vivus.js'],
    ],
  ];
  // bootstrap library.
  $libraries['bootstrap'] = [
    'name' => 'bootstrap',
    'vendor url' => 'http://getbootstrap.com',
    'download url' => 'https://github.com/seiyria/bootstrap-slider/releases',
    'version callback' => '_c4d_rcd_check_library_version', // Version >= 3.3.7
    'files' => [
      'js' => ['js/bootstrap.min.js'],
    ],
  ];
  // bootstrap-slider library.
  $libraries['bootstrap-slider'] = [
    'name' => 'bootstrap-slider',
    'vendor url' => 'https://github.com/seiyria/bootstrap-slider',
    'download url' => 'https://github.com/seiyria/bootstrap-slider/releases',
    'version callback' => '_c4d_rcd_check_library_version', // Version >= 9.7.2
    'files' => [
      'js' => ['src/js/bootstrap-slider.js'],
    ],
  ];
  // PhpSpreadsheet library.
  $libraries['phpspreadsheet'] = [
    'name' => 'phpspreadsheet',
    'vendor url' => 'https://github.com/PHPOffice/PhpSpreadsheet',
    'download url' => 'https://github.com/PHPOffice/PhpSpreadsheet/releases',
    'version callback' => '_c4d_rcd_check_library_version', // Version >= 1.5.0
    'files' => [
      'php' => ['vendor/autoload.php'],
    ],
  ];

  return $libraries;
}

/**
 * Custom callback to check libraries versions.
 *
 * @return boolean
 */
function _c4d_rcd_check_library_version() {
  return TRUE;
}

/**
 * Implements hook_theme().
 */
function c4d_rcd_theme($existing, $type, $theme, $path) {
  return [
    'svg' => [
      'variables' => [],
      'file' => 'c4d_rcd.theme.inc',
      'template' => 'templates/svg',
    ],
    'svg_iframe_content' => [
      'variables' => ['diagram' => NULL],
      'file' => 'c4d_rcd.theme.inc',
      'template' => 'templates/svg_iframe_content',
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function c4d_rcd_form_eck__entity__form_alter(&$form, &$form_state, $form_id) {
  // We want to hide title for result and impact bundles as they will be
  // automatically set from this module.
  // @see c4d_rcd_entity_presave()
  $bundles = [C4D_RCD_BUNDLE_RESULT, C4D_RCD_BUNDLE_IMPACT];
  if (in_array($form['#bundle'], $bundles)) {
    $form['title']['#access'] = FALSE;
  }

  // We want to hide the matrix field for diagram entities.
  if ($form['#bundle'] == C4D_RCD_BUNDLE_DIAGRAM) {
    $form['field_rcd_matrix']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function c4d_rcd_form_eck__entity__delete_form_alter(&$form, &$form_state, $form_id) {
  // We need the cancel button of entity delete forms to close the modal when
  // form being displayed in a ctools modal.
  $form['actions']['cancel']['#attributes']['class'][] = 'ctools-close-modal';
}

/**
 * Implements hook_eck_entity_type_insert().
 */
function c4d_rcd_eck_entity_type_insert(EntityType $entity_type) {
  if ($entity_type != C4D_RCD_ENTITY_TYPE) {
    return;
  }

  // The SVG editor relies on specific 'magic' IDs (colonna: 12/13/100) for
  // priority areas.
  // We need to make sure those IDs won't be used, so we set the auto-increment
  // to 101 to avoid conflicts.
  // First check if the auto-increment is less than 101, otherwise we skip this
  // task.
  $table = 'eck_result_chain_diagram';
  if (db_table_exists($table)) {
    $result = db_query("SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '$table';")->fetchAssoc();
    if ($result['AUTO_INCREMENT'] <= 101) {
      db_query("ALTER TABLE $table AUTO_INCREMENT = 101;");
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function c4d_rcd_entity_presave($entity, $type) {
  // We want to set a title for result and impact bundles.
  $bundles = [C4D_RCD_BUNDLE_RESULT, C4D_RCD_BUNDLE_IMPACT];
  if ($type == C4D_RCD_ENTITY_TYPE && in_array($entity->type, $bundles)) {
    $entity->title = _c4d_rcd_generate_title($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function c4d_rcd_entity_delete($entity, $type) {
  if ($type != C4D_RCD_ENTITY_TYPE) {
    return;
  }

  // When deleting a diagram, we need to delete all child elements at the same
  // time.
  if ($entity->type == C4D_RCD_BUNDLE_DIAGRAM) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', C4D_RCD_ENTITY_TYPE)
      ->fieldCondition('field_rcd_diagram', 'target_id', $entity->id);
    $query_result = $query->execute();

    if (isset($query_result[C4D_RCD_ENTITY_TYPE])) {
      entity_delete_multiple(C4D_RCD_ENTITY_TYPE, array_keys($query_result[C4D_RCD_ENTITY_TYPE]));
    }
  }

  // When an SVG element is deleted, we need to delete related links.
  if (in_array($entity->type, [C4D_RCD_BUNDLE_IMPACT, C4D_RCD_BUNDLE_RESULT])) {
    $query = db_select('c4d_rcd_link', 'l')
      ->fields('l');
    $or = db_or();
    $or->condition('ele_1', $entity->id);
    $or->condition('ele_2', $entity->id);
    $query->condition($or);
    $query_result = $query->execute();

    $links = [];
    foreach ($query_result->fetchAll() as $item) {
      $links[] = $item->id;
    }

    if (!empty($links)) {
      db_delete('c4d_rcd_link')
        ->condition('id', $links, 'IN')
        ->execute();
    }
  }
}

/**
 * Implements template_preprocess_views_view_table().
 *
 * Format results_indicators view table to group each result's (or impact)
 * indicators.
 * Each result should already be grouped in table settings to produce one single
 * table for each.
 */
function c4d_rcd_preprocess_views_view_table(&$vars) {
  if ($vars['view']->name == 'results_indicators' && in_array($vars['view']->current_display, ['page', 'attachment_1'])) {
    // We assume field_rcd_type always has to be merged.
    $rowspan = 0;
    $first_index = -1;
    foreach ($vars['rows'] as $index => $row) {
      if (isset($row['field_rcd_type']) && $rowspan > 0) {
        unset($vars['rows'][$index]['field_rcd_type']);
      }
      if ($first_index == -1) {
        $first_index = $index;
      }
      $rowspan++;
    }
    $vars['field_attributes']['field_rcd_type'][$first_index]['rowspan'] = $rowspan;

    // Unset title, which is used only to group indicators to their result.
    $vars['title'] = '';
  }
}

/**
 * Implementation of hook_views_pre_render().
 */
function c4d_rcd_views_pre_render(&$view) {
  module_load_include('inc', 'c4d_rcd', 'c4d_rcd');
  _c4d_rcd_views_pre_render($view);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function c4d_rcd_form_views_exposed_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'c4d_rcd', 'c4d_rcd');
  _c4d_rcd_form_views_exposed_form_alter($form, $form_state);
}

/**
 * Returns a title based on SVG element properties.
 *
 * @param object $entity
 * @return string
 */
function _c4d_rcd_generate_title($entity) {
  if (isset($entity->field_rcd_svg_element[LANGUAGE_NONE][0]['titolo']) &&
      !empty(trim($entity->field_rcd_svg_element[LANGUAGE_NONE][0]['titolo']))) {
    return truncate_utf8(trim($entity->field_rcd_svg_element[LANGUAGE_NONE][0]['titolo']), 255, TRUE, TRUE);
  }
  elseif (isset($entity->field_rcd_svg_element[LANGUAGE_NONE][0]['descr']) &&
      !empty(trim($entity->field_rcd_svg_element[LANGUAGE_NONE][0]['descr']))) {
    return truncate_utf8(trim($entity->field_rcd_svg_element[LANGUAGE_NONE][0]['descr']), 255, TRUE, TRUE);
  }
  else {
    return t('Untitled !type', ['!type' => $entity->type]);
  }
}

/**
 * Diagram auto-loader function.
 *
 * @param int $diagram_id
 *
 * @return mixed
 *    Diagram array or FALSE if not found.
 */
function c4d_rcd_diagram_load($diagram_id) {
  // Load the diagram object.
  $diagrams = entity_load(C4D_RCD_ENTITY_TYPE, [$diagram_id]);
  if (empty($diagrams[$diagram_id])) {
    return FALSE;
  }
  return $diagrams[$diagram_id];
}

/**
 * Title callback for the diagram management page.
 *
 * @param object $diagram
 *    Diagram entity.
 *
 * @return string
 *    Page title.
 */
function c4d_rcd_diagram_management_title($diagram) {
  return t('Diagram: @title', ['@title' => $diagram->title]);
}

/**
 * Loads a diagram with all it's child elements (priority_areas, results,
 * floats, impacts, links).
 *
 * @param int $id
 *    Diagram ID.
 *
 * @param int $priority_area
 *    Priority area ID.
 *
 * @return array
 */
function _c4d_rcd_load_full_diagram($id, $priority_area = NULL) {
  $result = [
    'diagram' => NULL,
    'priority_areas' => [],
    'results' => [],
    'floats' => [],
    'impacts' => [],
    'indicators' => [],
    'links' => [],
  ];

  // Load the diagram object.
  $diagrams = entity_load(C4D_RCD_ENTITY_TYPE, [$id]);
  if (empty($diagrams[$id])) {
    return FALSE;
  }
  $result['diagram'] = $diagrams[$id];

  // Load diagram's priority areas.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', C4D_RCD_ENTITY_TYPE)
    ->entityCondition('bundle', C4D_RCD_BUNDLE_PRIORITY_AREA)
    ->fieldCondition('field_rcd_diagram', 'target_id', $id)
    ->fieldOrderBy('field_rcd_svg_element', 'contatore_z');
  if ($priority_area) {
    $query->fieldCondition('field_rcd_svg_element', 'colonna', $priority_area);
  }
  $query_result = $query->execute();
  if (isset($query_result[C4D_RCD_ENTITY_TYPE])) {
    $items = array_keys($query_result[C4D_RCD_ENTITY_TYPE]);
    $result['priority_areas'] = entity_load(C4D_RCD_ENTITY_TYPE, $items);
  }

  // Load diagram's impacts.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', C4D_RCD_ENTITY_TYPE)
    ->entityCondition('bundle', C4D_RCD_BUNDLE_IMPACT)
    ->fieldCondition('field_rcd_diagram', 'target_id', $id)
    ->fieldOrderBy('field_rcd_svg_element', 'contatore_z');
  if ($priority_area) {
    $query->fieldCondition('field_rcd_svg_element', 'colonna', $priority_area);
  }
  $query_result = $query->execute();
  if (isset($query_result[C4D_RCD_ENTITY_TYPE])) {
    $items = array_keys($query_result[C4D_RCD_ENTITY_TYPE]);
    $result['impacts'] = entity_load(C4D_RCD_ENTITY_TYPE, $items);
  }

  // Load diagram's indicators.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', C4D_RCD_ENTITY_TYPE)
    ->entityCondition('bundle', C4D_RCD_BUNDLE_INDICATOR)
    ->fieldCondition('field_rcd_diagram', 'target_id', $id);
  $query_result = $query->execute();
  if (isset($query_result[C4D_RCD_ENTITY_TYPE])) {
    $items = array_keys($query_result[C4D_RCD_ENTITY_TYPE]);
    $result['indicators'] = entity_load(C4D_RCD_ENTITY_TYPE, $items);
  }

  // Load diagram's floats.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', C4D_RCD_ENTITY_TYPE)
    ->entityCondition('bundle', C4D_RCD_BUNDLE_FLOAT)
    ->fieldCondition('field_rcd_diagram', 'target_id', $id)
    ->fieldOrderBy('field_rcd_svg_element', 'contatore_z');
  if ($priority_area) {
    $query->fieldCondition('field_rcd_svg_element', 'colonna', $priority_area);
  }
  $query_result = $query->execute();
  if (isset($query_result[C4D_RCD_ENTITY_TYPE])) {
    $items = array_keys($query_result[C4D_RCD_ENTITY_TYPE]);
    $result['floats'] = entity_load(C4D_RCD_ENTITY_TYPE, $items);
  }

  // Load diagram's results.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', C4D_RCD_ENTITY_TYPE)
    ->entityCondition('bundle', C4D_RCD_BUNDLE_RESULT)
    ->fieldCondition('field_rcd_diagram', 'target_id', $id)
    ->fieldOrderBy('field_rcd_svg_element', 'contatore_z');
  if ($priority_area) {
    $query->fieldCondition('field_rcd_svg_element', 'colonna', $priority_area);
  }
  $query_result = $query->execute();
  if (isset($query_result[C4D_RCD_ENTITY_TYPE])) {
    $items = array_keys($query_result[C4D_RCD_ENTITY_TYPE]);
    $result['results'] = entity_load(C4D_RCD_ENTITY_TYPE, $items);
  }

  // Load diagram's links.
  $query = db_select('c4d_rcd_link', 'l')
    ->fields('l')
    ->condition('id_prj', $id);
  if ($priority_area) {
    $query->join('field_data_field_rcd_svg_element', 'svg', 'l.ele_1 = svg.entity_id');
    $query->condition('svg.field_rcd_svg_element_colonna', $priority_area);
  }
  $query_result = $query->execute();
  foreach ($query_result->fetchAll() as $item) {
    $result['links'][$item->id] = (array) $item;
  }

  return $result;
}
